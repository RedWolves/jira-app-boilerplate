#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('JIRA:server');
var http = require('http');
var ngrok = require('ngrok');
var fs = require('fs');
var request = require('request');
var ngrokUrl = "";

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Listen for server shutdown and disconnect ngrok
 */
process.on('SIGINT', function() {
    server.close(function(){
        ngrok.disconnect();
        debug("ngrok disconnected.");
        process.exit();
    });
});


/**
 * Start ngrok
 */
function startNgrok(port) {
  ngrok.connect(port, function(err, url){
    
    let descriptor = JSON.parse(fs.readFileSync('atlassian-connect.json'));
    ngrokUrl = descriptor.baseUrl = url;
    let dir = 'generated/';

    if (!fs.existsSync(dir)){
        fs.mkdirSync(dir);
    }
    fs.writeFileSync(dir + 'atlassian-connect.json', JSON.stringify(descriptor));
    debug("atlassian-connect.json has been generated in ./generated/atlassian-connect.json");
    console.log(descriptor);

    debug("ngrok started at " + url);
    registerMPAC();
  });
}

function registerMPAC() {
  let credentials = JSON.parse(fs.readFileSync('credentials.json'));
  if (credentials) {
    request.get("https://" + credentials.hosts.instance + "/rest/plugins/1.0/?os_authType=basic",
      {
        'auth': {
          'user': credentials.hosts.username,
          'pass': credentials.hosts.password
        },
        'headers': {
          'accept': 'application/vnd.atl.plugins.installed+json',
          'WWW-Authenticate': 'basic'
        }
      }, (err, res, body) => {
        debug("Fetching UPM Token...");
        if (err) {
          console.log(err);
        } else {
          debug("UPM token received: " + res.headers['upm-token']);
          let upmToken = res.headers['upm-token'];
          let descriptor = JSON.parse(fs.readFileSync("generated/atlassian-connect.json"));
          
          request.post("https://" + credentials.hosts.instance + "/rest/plugins/1.0/?token=" + upmToken, 
            {
              'auth': {
                'user': credentials.hosts.username,
                'pass': credentials.hosts.password
              },
              'headers': {
                'Accept': 'application/json',
                'Content-Type': 'application/vnd.atl.plugins.install.uri+json'
              },
              'body':JSON.stringify({
                          "pluginName": descriptor.name,
                          "pluginUri": descriptor.baseUrl + "/atlassian-connect.json"
                        })
            }, (err, res, body) => {
              debug(JSON.stringify({
                          "pluginName": descriptor.name,
                          "pluginUri": descriptor.baseUrl + "/atlassian-connect.json"
                        }));
              debug("Auto-registering add-on with UPM...");
              if (err) {
                console.log(err);
              } else {
                if (res.statusCode === 200) {
                  debug("Auto-register successful.");
                  console.log(body);
                } else {
                  debug("Auto-register failure - StatusCode:" + res.statusCode);
                  console.log(body);
                }
              }
            });
        }
      })
  } else {
    debug("No credentials. Skipping auto-registering with MPAC.");
  }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  startNgrok(addr.port);
  
}
